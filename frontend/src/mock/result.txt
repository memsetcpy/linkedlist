import sys# import numpy as npfrom itertools import count# Rule for spiral: move: right 1, down 1, left 2, up 2, right 3, down 3, left 4, up 4...# F i l e : S p i r a l . py# D e s c r i p t i o n : create spiral and add nums adj to specif num# S t u d e n t Name : Matthew Plaisance# S t u d e n t UT EID : Mep 3622# C o u r se Name : CS 313E# Unique Number : 86439# Date C r e at e d : 6/5# Date L a st M o di fi e d : 6/6def create_spiral(n):    def grid():        return [['emp' for i in range(n)] for j in range(n)]  # empty nxn grid    spiral = grid()    direction = [[1, 0], [0, 1], [-1, 0], [0, -1]]  # right,down(increases array #),left,up    max_num = n ** 2  # highest number in spiral    x = y = n // 2    spiral[y][x] = 1  # places 1 at the center (gives index (1,1) for n = 3)    def step():        for i in count(start=1):            if i % 2 == 0:  # if nxn (imagine we're leaving, from 4's position) is even we want to go left 1, up i, right i                yield direction[2]                for ii in range(i):                    yield direction[3]                for ii in range(i):                    yield direction[0]            else:  # if nxn is odd we want to go right 1, down i, left i                yield direction[0]                for ii in range(i):                    yield direction[1]                for ii in range(i):                    yield direction[2]    for i, enum_step in enumerate(step(), start=2):  # 0 placed        if i <= max_num:            if enum_step == [1, 0]:  # yielded right so increase position in array by 1                x += 1                spiral[y][x] = i            if enum_step == [0, 1]:  # yielded down so move to the next array in 2D array                y += 1                spiral[y][x] = i            if enum_step == [-1, 0]:                x += -1                spiral[y][x] = i            if enum_step == [0, -1]:                y += -1                spiral[y][x] = i        else:            break    return spiraldef add_adjacent_numbers(my_spiral, magic_num):    for array, item in enumerate(my_spiral):        if magic_num in item:            magic_num_position = (array, item.index(magic_num))            break    left_num_pos = int([magic_num_position[1] - 1][0])  # number to left(in reference to the spiral) of our magiic_num postion within array    magic_num_array = int([magic_num_position[0]][0])    right_num_pos = left_num_pos + 2    top_num_array = int([magic_num_position[0] - 1][0])  # numbers above magic_num are in the array to the left    bot_num_array = top_num_array + 2    top_num = my_spiral[top_num_array][magic_num_position[1]]    left_num = my_spiral[magic_num_array][left_num_pos]    x = (len(my_spiral[0]) - 1)    if magic_num_position[1] == 0 and magic_num_position[1] != 0:  # now on left side        right_num = my_spiral[magic_num_array][right_num_pos]        if right_num - magic_num != 1:            dia_tr = my_spiral[top_num_array][right_num_pos]            dia_br = my_spiral[bot_num_array][right_num_pos]            bot_num = my_spiral[bot_num_array][magic_num_position[1]]            adj_nums = top_num + bot_num + right_num + dia_tr + dia_br            print(adj_nums)    elif magic_num_position[1] == 0 and magic_num_position[0] == 0:  # top left corner        left_num = my_spiral[magic_num_array][left_num_pos]        dia_bl = my_spiral[bot_num_array][left_num_pos]        bot_num = my_spiral[bot_num_array][magic_num_position[1]]        adj_nums = left_num + bot_num + dia_bl        print(adj_nums)    elif magic_num_position[0] == 0 and magic_num_position[1] != 0 and magic_num_position[        1] != x:  # interior top row        left_num = my_spiral[magic_num_array][left_num_pos]        right_num = my_spiral[magic_num_array][right_num_pos]        dia_br = my_spiral[bot_num_array][right_num_pos]        dia_bl = my_spiral[bot_num_array][left_num_pos]        bot_num = my_spiral[bot_num_array][magic_num_position[1]]        adj_nums = left_num + right_num + bot_num + dia_bl + dia_br        print(adj_nums)    elif (magic_num_position[1] == (len(my_spiral[0]) - 1) and abs(            left_num - magic_num) != 1) or magic_num == 10:  # interior right side        top_num = my_spiral[top_num_array][magic_num_position[1]]        dia_bl = my_spiral[bot_num_array][left_num_pos]        dia_tl = my_spiral[top_num_array][left_num_pos]        bot_num = my_spiral[bot_num_array][magic_num_position[1]]        adj_nums = left_num + top_num + bot_num + dia_bl + dia_tl        print(adj_nums)    elif magic_num_position[1] == (len(my_spiral[0]) - 1) and (            magic_num - left_num == 1) and magic_num != 10:  # top right        dia_bl = my_spiral[bot_num_array][left_num_pos]        bot_num = my_spiral[bot_num_array][magic_num_position[1]]        adj_nums = left_num + bot_num + dia_bl        print(adj_nums)    elif magic_num_position[1] == (len(my_spiral[0]) - 1) and (left_num - magic_num == 1):  # bot right        dia_tl = my_spiral[top_num_array][left_num_pos]        adj_nums = top_num + left_num + dia_tl        print(adj_nums)    elif magic_num_position[0] == x and abs(magic_num - top_num) != 1:  # bot w/out bot right/left        right_num = my_spiral[magic_num_array][right_num_pos]        dia_tr = my_spiral[top_num_array][right_num_pos]        dia_tl = my_spiral[top_num_array][left_num_pos]        adj_nums = top_num + left_num + right_num + dia_tl + dia_tr        print(adj_nums)    elif magic_num_position[0] == x and magic_num_position[1] == 0:  # bot left        dia_tr = my_spiral[top_num_array][right_num_pos]        right_num = my_spiral[magic_num_array][right_num_pos]        adj_nums = top_num + right_num + dia_tr        print(adj_nums)    else:  # interior        top_num = my_spiral[top_num_array][magic_num_position[1]]        right_num = my_spiral[magic_num_array][right_num_pos]        dia_tr = my_spiral[top_num_array][right_num_pos]        dia_br = my_spiral[bot_num_array][right_num_pos]        dia_tl = my_spiral[top_num_array][left_num_pos]        dia_bl = my_spiral[bot_num_array][left_num_pos]        bot_num = my_spiral[bot_num_array][magic_num_position[1]]        left_num = my_spiral[magic_num_array][left_num_pos]        adj_nums = top_num + bot_num + left_num + right_num + dia_tl + dia_bl + dia_tr + dia_br        print(adj_nums)def main():    data = sys.stdin.read()    data_list = data.split('\')    n = int(data_list[0])    del data_list[0]    while '' in data_list:        data_list.remove('')    for i in range(0, len(data_list)):        data_list[i] = int(data_list[i])    my_spiral = create_spiral(n)    for i in data_list:        add_adjacent_numbers(my_spiral, i)if __name__ == '__main__':    main()